image: mcr.microsoft.com/dotnet/sdk:latest

stages:
  - build
  - test
  - qa
  - publish
  - deploy

variables:
  OBJECTS_DIRECTORY: 'obj'
  NUGET_PACKAGES_DIRECTORY: '.nuget'
  SOURCE_CODE_PATH: '*/'
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

cache:
  key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
  paths:
    - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/project.assets.json'
    - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/*.csproj.nuget.*'
    - '$NUGET_PACKAGES_DIRECTORY'
  policy: pull-push

before_script:
  - 'dotnet restore --packages $NUGET_PACKAGES_DIRECTORY'

build:
  stage: build
  script:
    - 'dotnet build --no-restore'

dotnet-tests:
  stage: test
  script:
    - 'dotnet test --no-restore'

sonarqube-check:
  stage: qa
  image: mcr.microsoft.com/dotnet/sdk:7.0
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
      - "apt-get update"
      - "apt-get install --yes --no-install-recommends openjdk-17-jre"
      - "dotnet tool install --global dotnet-sonarscanner"
      - "export PATH=\"$PATH:$HOME/.dotnet/tools\""
      - "dotnet sonarscanner begin /k:\"simple-dotnet-api-test\" /d:sonar.token=\"$SONAR_TOKEN\" /d:\"sonar.host.url=$SONAR_HOST_URL\" "
      - "dotnet build"
      - "dotnet sonarscanner end /d:sonar.token=\"$SONAR_TOKEN\""
  only:
    - master

publish-to-registry:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  only:
    - master
  before_script:
    - sudo apt-get update && sudo apt-get install -y dotnet-sdk-7.0
  script:
    - docker build -t romano2001/simple-dotnet-api-test:latest -f SimpleDotnetApi.Application/Dockerfile .
    - docker login -u romano2001 -p $DOCKER_TOKEN
    - docker push romano2001/simple-dotnet-api-test:latest

deploy-job:
  stage: deploy
  environment: production
  only:
    - master
  
  script:
    - apt-get update -qy
    - apt-get install -y openssh-client
    - echo "$SSH_PRIVATE_KEY" > ssh_key
    - chmod 600 ssh_key

    # Create the .ssh directory and known_hosts file
    - mkdir -p ~/.ssh
    - touch ~/.ssh/known_hosts

    # Add the remote host key to known_hosts 
    - ssh-keyscan -H $VPS_HOST >> ~/.ssh/known_hosts

    - ssh -v -i ssh_key $VPS_USER@$VPS_HOST "docker service update --image romano2001/simple-dotnet-api-test:latest simple-dotnet-api-test"
    # - ssh -v -i ssh_key $VPS_USER@$VPS_HOST "docker pull romano2001/simple-react-app-test:latest"
    # - ssh -v -i ssh_key $VPS_USER@$VPS_HOST "docker run -d --name my-dotnet-api -p 1234:1234 romano2001/simple-react-app-test:latest"

